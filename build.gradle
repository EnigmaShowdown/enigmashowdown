buildscript {
    ext {
        junit5Version = '5.10.0' // https://junit.org/junit5/
        junit5PlatformVersion = '1.10.0'
        jacksonVersion = "2.15.1" // https://github.com/FasterXML/jackson/wiki/Jackson-Releases

        kotlinVersion = "1.9.10" // https://kotlinlang.org/docs/releases.html#release-details
        slf4jVersion = '2.0.9' // http://www.slf4j.org/download.html
        log4jVersion = '2.20.0' // https://logging.apache.org/log4j/2.x/javadoc.html

        gdxVersion = '1.12.1' // https://github.com/libgdx/libgdx/releases
    }

    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    // https://github.com/diffplug/spotless/tags
    // https://github.com/diffplug/spotless/tree/main/plugin-gradle
    // https://mvnrepository.com/artifact/com.diffplug.spotless/spotless-plugin-gradle
    id 'com.diffplug.spotless' version '6.20.0'
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
}

description = "Enigma Showdown"
group = "com.enigmashowdown"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }

    // https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

}


spotless {
    enforceCheck = false // doesn't have to be formatted correctly for ./gradlew build to work
    kotlin {
        target '**/*.kt', '**/*.kts'
        // https://github.com/diffplug/spotless/tree/main/plugin-gradle#ktlint
        // https://pinterest.github.io/ktlint/
        ktlint()
            .setEditorConfigPath("$projectDir/.editorconfig")
            .editorConfigOverride(Map.of(
                    "ktlint_standard_no-wildcard-imports", "disabled", // thanks https://github.com/diffplug/spotless/issues/476
            ))
    }
    groovyGradle {
        // https://github.com/diffplug/spotless/tree/main/plugin-gradle#groovy
        target '*.gradle' // default target of groovyGradle
        // TODO get gradle spotless working
    }
}

kotlin {
    // https://kotlinlang.org/docs/gradle-configure-project.html#targeting-the-jvm
    jvmToolchain(17)
}


subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'maven-publish'
    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junit5Version
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5Version"
        testImplementation "org.junit.platform:junit-platform-commons:$junit5PlatformVersion"
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: junit5Version
    }
    test {
        useJUnitPlatform()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                // https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:publications
                // We override the publication identity to automatically give group and artifact IDs to each project
                groupId = "${group}"
                artifactId = "${project.name}"
                // RELEASE_VERSION used to be set in release-publish.yml, but now that file is deleted.
                //   I'm going to keep this code here so that if you wanted to, you could override the version.
                //   However, jitpack won't actually care what the version or groupId is set to
                String releaseVersion = System.getenv("RELEASE_VERSION")
                version = (releaseVersion == null || releaseVersion.isEmpty()) ? "SNAPSHOT" : releaseVersion

                from project.components.java
            }
        }
        repositories {
            // If we decide to publish to GitHub packages in the future, we may refer to
            //   https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-github-packages
            // If we decide to publish to Maven Central in the future, we may refer to:
            //   https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-gradle#publishing-packages-to-the-maven-central-repository
            //   https://central.sonatype.org/publish/publish-guide/
            // We don't have to explicitly declare JitPack as a maven repository here because JitPack will build it.

            // TODO maven central is the long term goal, but for now JitPack will work just fine
        }
    }
}


wrapper {
    // https://gradle.org/releases/
    // remember to run this task after updating gradleVersion!
    gradleVersion = '8.4'
    distributionType = Wrapper.DistributionType.ALL
}
